// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
)

type Image struct {
	ID    string `json:"id"`
	Image string `json:"image"`
}

func (Image) IsEntity() {}

type Mutation struct {
}

type Query struct {
}

type ImageSize string

const (
	ImageSizeSize160  ImageSize = "SIZE_160"
	ImageSizeSize320  ImageSize = "SIZE_320"
	ImageSizeSize640  ImageSize = "SIZE_640"
	ImageSizeSize800  ImageSize = "SIZE_800"
	ImageSizeSize1024 ImageSize = "SIZE_1024"
	ImageSizeSize1200 ImageSize = "SIZE_1200"
	ImageSizeOriginal ImageSize = "ORIGINAL"
)

var AllImageSize = []ImageSize{
	ImageSizeSize160,
	ImageSizeSize320,
	ImageSizeSize640,
	ImageSizeSize800,
	ImageSizeSize1024,
	ImageSizeSize1200,
	ImageSizeOriginal,
}

func (e ImageSize) IsValid() bool {
	switch e {
	case ImageSizeSize160, ImageSizeSize320, ImageSizeSize640, ImageSizeSize800, ImageSizeSize1024, ImageSizeSize1200, ImageSizeOriginal:
		return true
	}
	return false
}

func (e ImageSize) String() string {
	return string(e)
}

func (e *ImageSize) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ImageSize(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ImageSize", str)
	}
	return nil
}

func (e ImageSize) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
