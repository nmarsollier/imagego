// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/engine/di/injector.go

// Package mockgen is a generated GoMock package.
package mockgen

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	httpx "github.com/nmarsollier/imagego/internal/engine/httpx"
	log "github.com/nmarsollier/imagego/internal/engine/log"
	redisx "github.com/nmarsollier/imagego/internal/engine/redisx"
	image "github.com/nmarsollier/imagego/internal/image"
	rabbit "github.com/nmarsollier/imagego/internal/rabbit"
	security "github.com/nmarsollier/imagego/internal/security"
)

// MockInjector is a mock of Injector interface.
type MockInjector struct {
	ctrl     *gomock.Controller
	recorder *MockInjectorMockRecorder
}

// MockInjectorMockRecorder is the mock recorder for MockInjector.
type MockInjectorMockRecorder struct {
	mock *MockInjector
}

// NewMockInjector creates a new mock instance.
func NewMockInjector(ctrl *gomock.Controller) *MockInjector {
	mock := &MockInjector{ctrl: ctrl}
	mock.recorder = &MockInjectorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInjector) EXPECT() *MockInjectorMockRecorder {
	return m.recorder
}

// ConsumeLogoutService mocks base method.
func (m *MockInjector) ConsumeLogoutService() rabbit.ConsumeLogoutService {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConsumeLogoutService")
	ret0, _ := ret[0].(rabbit.ConsumeLogoutService)
	return ret0
}

// ConsumeLogoutService indicates an expected call of ConsumeLogoutService.
func (mr *MockInjectorMockRecorder) ConsumeLogoutService() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConsumeLogoutService", reflect.TypeOf((*MockInjector)(nil).ConsumeLogoutService))
}

// HttpClient mocks base method.
func (m *MockInjector) HttpClient() httpx.HTTPClient {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HttpClient")
	ret0, _ := ret[0].(httpx.HTTPClient)
	return ret0
}

// HttpClient indicates an expected call of HttpClient.
func (mr *MockInjectorMockRecorder) HttpClient() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HttpClient", reflect.TypeOf((*MockInjector)(nil).HttpClient))
}

// ImageRepository mocks base method.
func (m *MockInjector) ImageRepository() image.ImageRepository {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ImageRepository")
	ret0, _ := ret[0].(image.ImageRepository)
	return ret0
}

// ImageRepository indicates an expected call of ImageRepository.
func (mr *MockInjectorMockRecorder) ImageRepository() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ImageRepository", reflect.TypeOf((*MockInjector)(nil).ImageRepository))
}

// ImageService mocks base method.
func (m *MockInjector) ImageService() image.ImageService {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ImageService")
	ret0, _ := ret[0].(image.ImageService)
	return ret0
}

// ImageService indicates an expected call of ImageService.
func (mr *MockInjectorMockRecorder) ImageService() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ImageService", reflect.TypeOf((*MockInjector)(nil).ImageService))
}

// Logger mocks base method.
func (m *MockInjector) Logger() log.LogRusEntry {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Logger")
	ret0, _ := ret[0].(log.LogRusEntry)
	return ret0
}

// Logger indicates an expected call of Logger.
func (mr *MockInjectorMockRecorder) Logger() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Logger", reflect.TypeOf((*MockInjector)(nil).Logger))
}

// RedisClient mocks base method.
func (m *MockInjector) RedisClient() redisx.RedisClient {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RedisClient")
	ret0, _ := ret[0].(redisx.RedisClient)
	return ret0
}

// RedisClient indicates an expected call of RedisClient.
func (mr *MockInjectorMockRecorder) RedisClient() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RedisClient", reflect.TypeOf((*MockInjector)(nil).RedisClient))
}

// SecurityRepository mocks base method.
func (m *MockInjector) SecurityRepository() security.SecurityRepository {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SecurityRepository")
	ret0, _ := ret[0].(security.SecurityRepository)
	return ret0
}

// SecurityRepository indicates an expected call of SecurityRepository.
func (mr *MockInjectorMockRecorder) SecurityRepository() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SecurityRepository", reflect.TypeOf((*MockInjector)(nil).SecurityRepository))
}

// SecurityService mocks base method.
func (m *MockInjector) SecurityService() security.SecurityService {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SecurityService")
	ret0, _ := ret[0].(security.SecurityService)
	return ret0
}

// SecurityService indicates an expected call of SecurityService.
func (mr *MockInjectorMockRecorder) SecurityService() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SecurityService", reflect.TypeOf((*MockInjector)(nil).SecurityService))
}
