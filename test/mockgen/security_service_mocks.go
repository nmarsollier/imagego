// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/security/service.go

// Package mockgen is a generated GoMock package.
package mockgen

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	security "github.com/nmarsollier/imagego/internal/security"
)

// MockSecurityService is a mock of SecurityService interface.
type MockSecurityService struct {
	ctrl     *gomock.Controller
	recorder *MockSecurityServiceMockRecorder
}

// MockSecurityServiceMockRecorder is the mock recorder for MockSecurityService.
type MockSecurityServiceMockRecorder struct {
	mock *MockSecurityService
}

// NewMockSecurityService creates a new mock instance.
func NewMockSecurityService(ctrl *gomock.Controller) *MockSecurityService {
	mock := &MockSecurityService{ctrl: ctrl}
	mock.recorder = &MockSecurityServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSecurityService) EXPECT() *MockSecurityServiceMockRecorder {
	return m.recorder
}

// Invalidate mocks base method.
func (m *MockSecurityService) Invalidate(token string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Invalidate", token)
}

// Invalidate indicates an expected call of Invalidate.
func (mr *MockSecurityServiceMockRecorder) Invalidate(token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Invalidate", reflect.TypeOf((*MockSecurityService)(nil).Invalidate), token)
}

// Validate mocks base method.
func (m *MockSecurityService) Validate(token string) (*security.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Validate", token)
	ret0, _ := ret[0].(*security.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Validate indicates an expected call of Validate.
func (mr *MockSecurityServiceMockRecorder) Validate(token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Validate", reflect.TypeOf((*MockSecurityService)(nil).Validate), token)
}
